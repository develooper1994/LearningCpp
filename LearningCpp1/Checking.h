#pragma once
#include "Account.h"
/*
Not inherited member functions
- constructor
- destructor
- assignment operator
*/
namespace Banking
{
	class Checking : public Account
	{
	private:
		// doesn't have any variables ;)
		// values hold inside of Account class ;)
		// 
	public:
		// this will be cause all the constructor of the base to be inherited in the checking class
		// it will be similar to the manual implementation of the Checking constructor that had done earlier.

		// Inheriting constructors solves our problem.
		// With this feature, you can inherit the constructor of a base class so that you don't have to manually
		// All the constructor of the base to be inherited in the checking class
		/*
		// Call Stack with Inheriting constructors(just one call)
		// constructor of the Cheking class auto generated by the compiler "Banking::Checking::Checking"
		  __cdecl Banking::Account::Account(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,float)
		*/
		using Account::Account;
		//constructor
		 // exist only to invoke the base class constructor.
		// It doesn't do nay initialization of its own in C++ ;)
		/*
		// Call Stack with Checking constructor
			__cdecl Banking::Account::Account(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,float)
			__cdecl Banking::Checking::Checking(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,float)
		*/
		//Checking(const std::string& name, float accBalance);
		//destructor
		~Checking();

		//member functions
		void WithDraw(float amount, float max = 50.0f);

	};

	struct Checking_TEST
	{
		inline void Checking_TEST1() {
			Checking checking("Bob", 1000);
			std::cout << "Initial balance: " << checking.GetBalance() << '\n';
			checking.Deposit(200); // +200
			checking.WithDraw(300); // -300
			std::cout << "Balance: " << checking.GetBalance() << '\n'; // 900

			checking.WithDraw(300 * 10); // -3000 // cerr
		}
		void Checking_TEST_main() {
			Checking_TEST1();
		}
	};

}